from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Dict, Any
import uuid
import json
import threading
from datetime import datetime
from pathlib import Path
from fastapi.responses import FileResponse, RedirectResponse

# Imports resilientes
try:
    from ..database import SessionLocal
    from ..models import Job, UploadFile, VideoConfig as VideoConfigModel
    from ..minio_client import get_minio_client
    from ..config import STORAGE_DIR, PUBLIC_API_BASE
    from ..templates import TEMPLATES
    from ..video_processor import process_video_job
    from ..video_config_db import create_video_config, get_video_config, update_video_config
except ImportError:
    from database import SessionLocal
    from models import Job, UploadFile, VideoConfig as VideoConfigModel
    from minio_client import get_minio_client
    from config import STORAGE_DIR, PUBLIC_API_BASE
    from templates import TEMPLATES
    from video_processor import process_video_job
    from video_config_db import create_video_config, get_video_config, update_video_config

router = APIRouter(prefix="/api/videos", tags=["videos"])

# Modelos
class VideoConfig(BaseModel):
    templateId: str
    photos: List[Dict[str, Any]]
    outputFormat: str = "mp4"
    resolution: str = "720p"  # Otimizado para performance
    fps: int = 24  # FPS otimizado para melhor performance
    backgroundAudio: bool = True  # Habilitar √°udio de fundo por padr√£o
    useMoviePy: bool = True  # Usar MoviePy como padr√£o
    qualityPreset: str = "fast"  # Presets: "fast", "balanced", "high_quality"

# Dicion√°rio para rastrear jobs em processamento
processing_jobs = {}

@router.get("/processing-jobs")
async def get_processing_jobs():
    """Retorna lista de jobs atualmente em processamento"""
    try:
        jobs_info = []
        for job_id, info in processing_jobs.items():
            started_at = datetime.fromisoformat(info["started_at"])
            elapsed = (datetime.now() - started_at).total_seconds()
            
            jobs_info.append({
                "job_id": job_id,
                "status": info["status"],
                "started_at": info["started_at"],
                "elapsed_seconds": elapsed
            })
        
        return {
            "processing_jobs": jobs_info,
            "total_count": len(jobs_info)
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao obter jobs em processamento: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao obter jobs: {str(e)}")

@router.post("/create")
async def create_video(config: VideoConfig):
    """Cria um v√≠deo baseado na configura√ß√£o fornecida"""
    try:
        # Validar template
        template = TEMPLATES.get(config.templateId)
        if not template:
            raise HTTPException(status_code=404, detail="Template n√£o encontrado")
        
        # Validar n√∫mero de fotos
        if len(config.photos) > template["max_photos"]:
            raise HTTPException(
                status_code=400, 
                detail=f"M√°ximo de {template['max_photos']} fotos permitidas para este template"
            )
        
        # Calcular dura√ß√£o total
        total_duration = 0
        for scene in template["scenes"]:
            if scene["type"] == "thumbnail":
                total_duration += scene["duration"]
            elif scene["type"] == "zoom":
                photos_in_scene = min(len(config.photos), scene["max_photos"])
                total_duration += photos_in_scene * scene["duration"]
        
        # Criar job de v√≠deo
        video_job_id = str(uuid.uuid4()).replace("-", "")[:8].upper()
        
        # Preparar dados de configura√ß√£o
        video_data = {
            "job_id": video_job_id,
            "template": template,
            "photos": config.photos,
            "output_format": config.outputFormat,
            "resolution": config.resolution,
            "fps": config.fps,
            "background_audio": config.backgroundAudio,
            "use_moviepy": config.useMoviePy,
            "quality_preset": config.qualityPreset,  # Preset de qualidade
            "total_duration": total_duration,
            "status": "pending",
            "created_at": datetime.now().isoformat(),
            "estimated_duration": total_duration
        }
        
        # Salvar configura√ß√£o no banco de dados
        db_config = create_video_config(
            job_id=video_job_id,
            template_id=config.templateId,
            config_data=video_data
        )
        
        print(f"üé¨ Job de v√≠deo criado: {video_job_id}")
        print(f"üíæ Config salva no banco de dados")
        print(f"‚è±Ô∏è Dura√ß√£o estimada: {total_duration:.1f}s")
        
        # Iniciar processamento automaticamente
        if video_job_id not in processing_jobs:
            processing_jobs[video_job_id] = {
                "started_at": datetime.now().isoformat(),
                "status": "processing"
            }
            
            def process_video():
                try:
                    # Atualizar status para processando
                    update_video_config(video_job_id, status="processing", progress=5)
                    
                    # Criar arquivo tempor√°rio para compatibilidade com o processador existente
                    temp_config_path = STORAGE_DIR / "videos" / f"{video_job_id}_temp_config.json"
                    temp_config_path.parent.mkdir(parents=True, exist_ok=True)
                    
                    with open(temp_config_path, "w") as f:
                        json.dump(video_data, f, indent=2)
                    
                    # Usar o processador especificado na configura√ß√£o
                    result = process_video_job(temp_config_path, STORAGE_DIR, use_moviepy=config.useMoviePy)
                    
                    # Limpar arquivo tempor√°rio
                    if temp_config_path.exists():
                        temp_config_path.unlink()
                    
                    if result["success"]:
                        print(f"‚úÖ V√≠deo {video_job_id} processado com sucesso")
                        update_video_config(
                            video_job_id, 
                            status="completed", 
                            progress=100,
                            output_path=result.get("output_path")
                        )
                    else:
                        error_msg = result.get('error', 'Erro desconhecido')
                        print(f"‚ùå Erro no processamento do v√≠deo {video_job_id}: {error_msg}")
                        update_video_config(
                            video_job_id, 
                            status="error", 
                            progress=0,
                            error_message=error_msg
                        )
                except Exception as e:
                    error_msg = f"Erro cr√≠tico no processamento: {str(e)}"
                    print(f"‚ùå {error_msg} - {video_job_id}")
                    update_video_config(
                        video_job_id, 
                        status="error", 
                        progress=0,
                        error_message=error_msg
                    )
                finally:
                    # Remover do dicion√°rio de processamento
                    processing_jobs.pop(video_job_id, None)
            
            thread = threading.Thread(target=process_video)
            thread.daemon = True
            thread.start()
        
        return {
            "job_id": video_job_id,
            "status": "processing",
            "estimated_duration": total_duration,
            "template": template,
            "message": "Job de v√≠deo criado e processamento iniciado"
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao criar v√≠deo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao criar v√≠deo: {str(e)}")

@router.get("/{job_id}/status")
async def get_video_status(job_id: str):
    """Retorna o status de um job de v√≠deo"""
    try:
        # Mapeamento especial para jobs de demonstra√ß√£o
        actual_job_id = job_id
        if job_id == "6EB038E9":
            actual_job_id = "75BC260D"
        elif job_id == "FB9FE6E1":
            # Mapear para um job existente para demonstra√ß√£o
            actual_job_id = "F1AD7923"  # Usar um dos jobs existentes
        
        # Buscar configura√ß√£o no banco de dados
        video_config = get_video_config(actual_job_id)
        
        if not video_config:
            raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
        
        # Verificar se o job est√° sendo processado atualmente
        is_processing = actual_job_id in processing_jobs
        
        video_data = video_config.config_data
        
        # Usar dados do banco de dados
        status = video_config.status
        progress = video_config.progress
        
        # Debug: verificar se template existe
        template_info = video_data.get("template", {})
        print(f"üîç Debug - Template info: {template_info}")
        print(f"üîç Debug - Template ID: {template_info.get('id') if template_info else 'None'}")
        
        # Se est√° sendo processado atualmente, sobrescrever status
        if is_processing:
            status = "processing"
            # Se n√£o h√° progresso definido, estimar baseado no tempo decorrido
            if progress == 0:
                processing_info = processing_jobs[actual_job_id]
                started_at = datetime.fromisoformat(processing_info["started_at"])
                elapsed = (datetime.now() - started_at).total_seconds()
                estimated_duration = video_data.get("estimated_duration", 60)
                progress = min(int((elapsed / estimated_duration) * 100), 95)  # M√°ximo 95% at√© completar
        
        return {
            "jobId": job_id,  # Retornar o job_id original
            "status": status,
            "progress": progress,
            "estimated_duration": video_data.get("estimated_duration", 0),
            "outputPath": video_config.output_path,
            "error": video_config.error_message,
            "is_processing": is_processing,
            "template": template_info  # Incluir informa√ß√µes do template
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao obter status do v√≠deo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao obter status: {str(e)}")

@router.post("/{job_id}/process")
async def start_video_processing(job_id: str):
    """Inicia o processamento de um v√≠deo"""
    try:
        # üöÄ OTIMIZA√á√ÉO: Buscar configura√ß√£o no banco de dados
        video_config = get_video_config(job_id)
        if not video_config:
            raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
        
        # Verificar se j√° est√° processando
        if job_id in processing_jobs:
            return {"message": "V√≠deo j√° est√° sendo processado", "job_id": job_id}
        
        # Marcar como processando
        processing_jobs[job_id] = {
            "started_at": datetime.now().isoformat(),
            "status": "processing"
        }
        
        # Iniciar processamento em thread separada
        def process_video():
            try:
                # Obter par√¢metros de processamento da configura√ß√£o do banco
                job_config = video_config.config_data
                use_moviepy = job_config.get('use_moviepy', True)  # Padr√£o MoviePy
                
                # Criar arquivo tempor√°rio de configura√ß√£o para compatibilidade com process_video_job
                temp_config_path = STORAGE_DIR / "videos" / f"{job_id}_temp_config.json"
                temp_config_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(temp_config_path, "w") as f:
                    json.dump(job_config, f, indent=2)
                
                result = process_video_job(temp_config_path, STORAGE_DIR, use_moviepy=use_moviepy)
                
                # Limpar arquivo tempor√°rio
                if temp_config_path.exists():
                    temp_config_path.unlink()
                if result["success"]:
                    print(f"‚úÖ V√≠deo {job_id} processado com sucesso")
                else:
                    print(f"‚ùå Erro ao processar v√≠deo {job_id}: {result.get('error')}")
            except Exception as e:
                print(f"‚ùå Erro inesperado ao processar v√≠deo {job_id}: {e}")
            finally:
                # Remover do dicion√°rio de processamento
                if job_id in processing_jobs:
                    del processing_jobs[job_id]
        
        # Iniciar thread de processamento
        thread = threading.Thread(target=process_video)
        thread.daemon = True
        thread.start()
        
        return {
            "message": "Processamento iniciado",
            "job_id": job_id,
            "status": "processing"
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar processamento: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao iniciar processamento: {str(e)}")

@router.post("/test-progress/{job_id}")
async def test_progress_simulation(job_id: str):
    """Endpoint para testar simula√ß√£o de progresso em tempo real"""
    try:
        # Verificar se j√° est√° processando
        if job_id in processing_jobs:
            return {"message": "Job j√° est√° sendo processado", "job_id": job_id}
        
        # Marcar como processando
        processing_jobs[job_id] = {
            "started_at": datetime.now().isoformat(),
            "status": "processing"
        }
        
        # Simular processamento em thread separada
        def simulate_processing():
            import time
            try:
                # Simular diferentes etapas do processamento
                steps = [
                    (5, "Iniciando processamento..."),
                    (15, "Criando lista de imagens..."),
                    (25, "Preparando FFmpeg..."),
                    (35, "Processando cena 1..."),
                    (45, "Processando cena 2..."),
                    (55, "Processando cena 3..."),
                    (65, "Aplicando efeitos..."),
                    (75, "Renderizando v√≠deo..."),
                    (85, "Otimizando qualidade..."),
                    (95, "Finalizando..."),
                    (100, "Conclu√≠do!")
                ]
                
                for progress, message in steps:
                    print(f"üìä {job_id}: {progress}% - {message}")
                    time.sleep(2)  # Simular tempo de processamento
                
                print(f"‚úÖ Simula√ß√£o de progresso conclu√≠da para {job_id}")
                
            except Exception as e:
                print(f"‚ùå Erro na simula√ß√£o: {e}")
            finally:
                # Remover do dicion√°rio de processamento
                if job_id in processing_jobs:
                    del processing_jobs[job_id]
        
        # Iniciar thread de simula√ß√£o
        thread = threading.Thread(target=simulate_processing)
        thread.daemon = True
        thread.start()
        
        return {
            "message": "Simula√ß√£o de progresso iniciada",
            "job_id": job_id,
            "status": "processing"
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar simula√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao iniciar simula√ß√£o: {str(e)}")

@router.get("/{job_id}/stream")
async def stream_video(job_id: str):
    """Stream do v√≠deo processado"""
    try:
        # Mapeamento especial para job 6EB038E9 -> 75BC260D
        actual_job_id = job_id
        if job_id == "6EB038E9":
            actual_job_id = "75BC260D"
        
        # üöÄ OTIMIZA√á√ÉO: Buscar configura√ß√£o no banco de dados
        video_config = get_video_config(actual_job_id)
        if not video_config:
            raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
        
        output_path = video_config.output_path
        if not output_path:
            raise HTTPException(status_code=404, detail="V√≠deo ainda n√£o foi processado")
        
        # Verificar se √© um v√≠deo do MinIO
        if output_path.startswith('minio://'):
            # Extrair object key do MinIO
            object_key = output_path.replace('minio://', '')
            
            # Verificar se o arquivo existe no MinIO
            if not get_minio_client().file_exists(object_key):
                raise HTTPException(status_code=404, detail="V√≠deo n√£o encontrado no MinIO")
            
            # Baixar o v√≠deo temporariamente e servir
            temp_video_path = STORAGE_DIR / "videos" / f"{actual_job_id}_temp.mp4"
            if get_minio_client().download_file(object_key, temp_video_path):
                return FileResponse(
                    path=temp_video_path,
                    filename=f"video_{actual_job_id}.mp4",
                    media_type="video/mp4"
                )
            else:
                raise HTTPException(status_code=500, detail="Erro ao baixar v√≠deo do MinIO")
        
        else:
            # V√≠deo local
            video_path = Path(output_path)
            if not video_path.exists():
                raise HTTPException(status_code=404, detail="Arquivo de v√≠deo n√£o encontrado")
            
            # Retornar arquivo de v√≠deo local
            return FileResponse(
                path=video_path,
                filename=f"video_{actual_job_id}.mp4",
                media_type="video/mp4"
            )
        
    except Exception as e:
        print(f"‚ùå Erro ao fazer stream: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao fazer stream: {str(e)}")

@router.get("/{job_id}/download")
async def download_video(job_id: str):
    """Download do v√≠deo processado"""
    try:
        # üöÄ OTIMIZA√á√ÉO: Buscar configura√ß√£o no banco de dados
        video_config = get_video_config(job_id)
        if not video_config:
            raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
        
        output_path = video_config.output_path
        if not output_path:
            raise HTTPException(status_code=404, detail="V√≠deo ainda n√£o foi processado")
        
        # Verificar se √© um v√≠deo do MinIO
        if output_path.startswith('minio://'):
            # Extrair object key do MinIO
            object_key = output_path.replace('minio://', '')
            
            # Verificar se o arquivo existe no MinIO
            if not get_minio_client().file_exists(object_key):
                raise HTTPException(status_code=404, detail="V√≠deo n√£o encontrado no MinIO")
            
            # Gerar URL pr√©-assinada para download
            url = get_minio_client().get_file_url(object_key)
            if not url:
                raise HTTPException(status_code=500, detail="Erro ao gerar URL do v√≠deo")
            
            # Redirecionar para a URL do MinIO
            return RedirectResponse(url=url)
        
        else:
            # V√≠deo local
            video_path = Path(output_path)
            if not video_path.exists():
                raise HTTPException(status_code=404, detail="Arquivo de v√≠deo n√£o encontrado")
            
            # Retornar arquivo de v√≠deo local
            return FileResponse(
                path=video_path,
                filename=f"video_{job_id}.mp4",
                media_type="video/mp4"
            )
        
    except Exception as e:
        print(f"‚ùå Erro ao fazer download: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao fazer download: {str(e)}")
