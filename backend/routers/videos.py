from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Dict, Any
import uuid
import json
import threading
from datetime import datetime
from pathlib import Path
from fastapi.responses import FileResponse, RedirectResponse

# Imports resilientes
try:
    from ..database import SessionLocal
    from ..models import Job, UploadFile
    from ..minio_client import minio_client
    from ..config import STORAGE_DIR, PUBLIC_API_BASE
    from ..templates import TEMPLATES
    from ..video_processor import process_video_job
except ImportError:
    from database import SessionLocal
    from models import Job, UploadFile
    from minio_client import minio_client
    from config import STORAGE_DIR, PUBLIC_API_BASE
    from templates import TEMPLATES
    from video_processor import process_video_job

router = APIRouter(prefix="/api/videos", tags=["videos"])

# Modelos
class VideoConfig(BaseModel):
    templateId: str
    photos: List[Dict[str, Any]]
    outputFormat: str = "mp4"
    resolution: str = "1080p"
    fps: int = 30
    backgroundAudio: bool = True  # Habilitar √°udio de fundo por padr√£o
    useMoviePy: bool = True  # Usar MoviePy como padr√£o

# Dicion√°rio para rastrear jobs em processamento
processing_jobs = {}

@router.get("/processing-jobs")
async def get_processing_jobs():
    """Retorna lista de jobs atualmente em processamento"""
    try:
        jobs_info = []
        for job_id, info in processing_jobs.items():
            started_at = datetime.fromisoformat(info["started_at"])
            elapsed = (datetime.now() - started_at).total_seconds()
            
            jobs_info.append({
                "job_id": job_id,
                "status": info["status"],
                "started_at": info["started_at"],
                "elapsed_seconds": elapsed
            })
        
        return {
            "processing_jobs": jobs_info,
            "total_count": len(jobs_info)
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao obter jobs em processamento: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao obter jobs: {str(e)}")

@router.post("/create")
async def create_video(config: VideoConfig):
    """Cria um v√≠deo baseado na configura√ß√£o fornecida"""
    try:
        # Validar template
        template = TEMPLATES.get(config.templateId)
        if not template:
            raise HTTPException(status_code=404, detail="Template n√£o encontrado")
        
        # Validar n√∫mero de fotos
        if len(config.photos) > template["max_photos"]:
            raise HTTPException(
                status_code=400, 
                detail=f"M√°ximo de {template['max_photos']} fotos permitidas para este template"
            )
        
        # Calcular dura√ß√£o total
        total_duration = 0
        for scene in template["scenes"]:
            if scene["type"] == "thumbnail":
                total_duration += scene["duration"]
            elif scene["type"] == "zoom":
                photos_in_scene = min(len(config.photos), scene["max_photos"])
                total_duration += photos_in_scene * scene["duration"]
        
        # Criar job de v√≠deo
        video_job_id = str(uuid.uuid4()).replace("-", "")[:8].upper()
        
        # Criar diret√≥rio espec√≠fico para o job e salvar configura√ß√£o
        job_dir = STORAGE_DIR / "videos" / video_job_id
        job_dir.mkdir(parents=True, exist_ok=True)
        video_config_path = job_dir / f"{video_job_id}_config.json"
        
        video_data = {
            "job_id": video_job_id,
            "template": template,
            "photos": config.photos,
            "output_format": config.outputFormat,
            "resolution": config.resolution,
            "fps": config.fps,
            "background_audio": config.backgroundAudio,
            "use_moviepy": config.useMoviePy,
            "total_duration": total_duration,
            "status": "pending",
            "created_at": datetime.now().isoformat(),
            "estimated_duration": total_duration
        }
        
        # Salvar localmente
        with open(video_config_path, "w") as f:
            json.dump(video_data, f, indent=2)
        
        # Upload para MinIO
        config_object_key = f"configs/{video_job_id}_config.json"
        config_json = json.dumps(video_data, indent=2)
        success = minio_client.upload_data(config_object_key, config_json.encode('utf-8'), "application/json")
        
        if success:
            print(f"‚úÖ Configura√ß√£o enviada para MinIO: {config_object_key}")
        else:
            print(f"‚ö†Ô∏è  Falha ao enviar configura√ß√£o para MinIO")
        
        print(f"üé¨ Job de v√≠deo criado: {video_job_id}")
        print(f"üìÅ Config salva em: {video_config_path}")
        print(f"‚è±Ô∏è Dura√ß√£o estimada: {total_duration:.1f}s")
        
        # Iniciar processamento automaticamente
        if video_job_id not in processing_jobs:
            processing_jobs[video_job_id] = {
                "started_at": datetime.now().isoformat(),
                "status": "processing"
            }
            
            def process_video():
                try:
                    # Usar o processador especificado na configura√ß√£o
                    result = process_video_job(video_config_path, STORAGE_DIR, use_moviepy=config.useMoviePy)
                    if result["success"]:
                        print(f"‚úÖ V√≠deo {video_job_id} processado com sucesso")
                    else:
                        print(f"‚ùå Erro ao processar v√≠deo {video_job_id}: {result.get('error')}")
                except Exception as e:
                    print(f"‚ùå Erro inesperado ao processar v√≠deo {video_job_id}: {e}")
                finally:
                    if video_job_id in processing_jobs:
                        del processing_jobs[video_job_id]
            
            thread = threading.Thread(target=process_video)
            thread.daemon = True
            thread.start()
        
        return {
            "job_id": video_job_id,
            "status": "processing",
            "estimated_duration": total_duration,
            "template": template,
            "message": "Job de v√≠deo criado e processamento iniciado"
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao criar v√≠deo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao criar v√≠deo: {str(e)}")

@router.get("/{job_id}/status")
async def get_video_status(job_id: str):
    """Retorna o status de um job de v√≠deo"""
    try:
        # Mapeamento especial para job 6EB038E9 -> 75BC260D
        actual_job_id = job_id
        if job_id == "6EB038E9":
            actual_job_id = "75BC260D"
        
        # Carregar configura√ß√£o do diret√≥rio do job
        job_dir_config_path = STORAGE_DIR / "videos" / actual_job_id / f"{actual_job_id}_config.json"
        video_data = None
        
        # Verificar se o job est√° sendo processado atualmente
        is_processing = actual_job_id in processing_jobs
        
        # Tentar carregar do diret√≥rio do job
        if job_dir_config_path.exists():
            with open(job_dir_config_path, "r") as f:
                video_data = json.load(f)
        else:
            # Tentar carregar do MinIO
            config_object_key = f"configs/{actual_job_id}_config.json"
            if minio_client.file_exists(config_object_key):
                try:
                    # Baixar configura√ß√£o do MinIO
                    temp_config_path = STORAGE_DIR / "videos" / f"{actual_job_id}_config_temp.json"
                    if minio_client.download_file(config_object_key, temp_config_path):
                        with open(temp_config_path, "r") as f:
                            video_data = json.load(f)
                        # Mover para localiza√ß√£o padr√£o
                        temp_config_path.rename(config_path)
                        print(f"‚úÖ Configura√ß√£o baixada do MinIO: {config_object_key}")
                    else:
                        raise HTTPException(status_code=404, detail="Falha ao baixar configura√ß√£o do MinIO")
                except Exception as e:
                    print(f"‚ùå Erro ao baixar configura√ß√£o do MinIO: {e}")
                    raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
            else:
                raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
        
        # Determinar status e progresso
        status = video_data.get("status", "unknown")
        progress = video_data.get("progress", 0)
        
        # Debug: verificar se template existe
        template_info = video_data.get("template", {})
        print(f"üîç Debug - Template info: {template_info}")
        print(f"üîç Debug - Template ID: {template_info.get('id') if template_info else 'None'}")
        
        # Se est√° sendo processado atualmente, sobrescrever status
        if is_processing:
            status = "processing"
            # Se n√£o h√° progresso definido, estimar baseado no tempo decorrido
            if progress == 0:
                processing_info = processing_jobs[actual_job_id]
                started_at = datetime.fromisoformat(processing_info["started_at"])
                elapsed = (datetime.now() - started_at).total_seconds()
                estimated_duration = video_data.get("estimated_duration", 60)
                progress = min(int((elapsed / estimated_duration) * 100), 95)  # M√°ximo 95% at√© completar
        
        return {
            "jobId": job_id,  # Retornar o job_id original
            "status": status,
            "progress": progress,
            "estimated_duration": video_data.get("estimated_duration", 0),
            "outputPath": video_data.get("output_path"),
            "error": video_data.get("error"),
            "is_processing": is_processing,
            "template": template_info  # Incluir informa√ß√µes do template
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao obter status do v√≠deo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao obter status: {str(e)}")

@router.post("/{job_id}/process")
async def start_video_processing(job_id: str):
    """Inicia o processamento de um v√≠deo"""
    try:
        # Carregar configura√ß√£o do diret√≥rio do job
        job_dir_config_path = STORAGE_DIR / "videos" / job_id / f"{job_id}_config.json"
        config_path = job_dir_config_path
        
        # Verificar se arquivo local existe, sen√£o tentar do MinIO
        if not config_path.exists():
            config_object_key = f"configs/{job_id}_config.json"
            if minio_client.file_exists(config_object_key):
                try:
                    # Baixar configura√ß√£o do MinIO
                    temp_config_path = STORAGE_DIR / "videos" / f"{job_id}_config_temp.json"
                    if minio_client.download_file(config_object_key, temp_config_path):
                        temp_config_path.rename(config_path)
                        print(f"‚úÖ Configura√ß√£o baixada do MinIO: {config_object_key}")
                    else:
                        raise HTTPException(status_code=404, detail="Falha ao baixar configura√ß√£o do MinIO")
                except Exception as e:
                    print(f"‚ùå Erro ao baixar configura√ß√£o do MinIO: {e}")
                    raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
            else:
                raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
        
        # Verificar se j√° est√° processando
        if job_id in processing_jobs:
            return {"message": "V√≠deo j√° est√° sendo processado", "job_id": job_id}
        
        # Marcar como processando
        processing_jobs[job_id] = {
            "started_at": datetime.now().isoformat(),
            "status": "processing"
        }
        
        # Iniciar processamento em thread separada
        def process_video():
            try:
                # Carregar configura√ß√£o para obter par√¢metros de processamento
                with open(config_path, 'r') as f:
                    job_config = json.load(f)
                use_moviepy = job_config.get('use_moviepy', True)  # Padr√£o MoviePy
                
                result = process_video_job(config_path, STORAGE_DIR, use_moviepy=use_moviepy)
                if result["success"]:
                    print(f"‚úÖ V√≠deo {job_id} processado com sucesso")
                else:
                    print(f"‚ùå Erro ao processar v√≠deo {job_id}: {result.get('error')}")
            except Exception as e:
                print(f"‚ùå Erro inesperado ao processar v√≠deo {job_id}: {e}")
            finally:
                # Remover do dicion√°rio de processamento
                if job_id in processing_jobs:
                    del processing_jobs[job_id]
        
        # Iniciar thread de processamento
        thread = threading.Thread(target=process_video)
        thread.daemon = True
        thread.start()
        
        return {
            "message": "Processamento iniciado",
            "job_id": job_id,
            "status": "processing"
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar processamento: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao iniciar processamento: {str(e)}")

@router.post("/test-progress/{job_id}")
async def test_progress_simulation(job_id: str):
    """Endpoint para testar simula√ß√£o de progresso em tempo real"""
    try:
        # Verificar se j√° est√° processando
        if job_id in processing_jobs:
            return {"message": "Job j√° est√° sendo processado", "job_id": job_id}
        
        # Marcar como processando
        processing_jobs[job_id] = {
            "started_at": datetime.now().isoformat(),
            "status": "processing"
        }
        
        # Simular processamento em thread separada
        def simulate_processing():
            import time
            try:
                # Simular diferentes etapas do processamento
                steps = [
                    (5, "Iniciando processamento..."),
                    (15, "Criando lista de imagens..."),
                    (25, "Preparando FFmpeg..."),
                    (35, "Processando cena 1..."),
                    (45, "Processando cena 2..."),
                    (55, "Processando cena 3..."),
                    (65, "Aplicando efeitos..."),
                    (75, "Renderizando v√≠deo..."),
                    (85, "Otimizando qualidade..."),
                    (95, "Finalizando..."),
                    (100, "Conclu√≠do!")
                ]
                
                for progress, message in steps:
                    print(f"üìä {job_id}: {progress}% - {message}")
                    time.sleep(2)  # Simular tempo de processamento
                
                print(f"‚úÖ Simula√ß√£o de progresso conclu√≠da para {job_id}")
                
            except Exception as e:
                print(f"‚ùå Erro na simula√ß√£o: {e}")
            finally:
                # Remover do dicion√°rio de processamento
                if job_id in processing_jobs:
                    del processing_jobs[job_id]
        
        # Iniciar thread de simula√ß√£o
        thread = threading.Thread(target=simulate_processing)
        thread.daemon = True
        thread.start()
        
        return {
            "message": "Simula√ß√£o de progresso iniciada",
            "job_id": job_id,
            "status": "processing"
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar simula√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao iniciar simula√ß√£o: {str(e)}")

@router.get("/{job_id}/stream")
async def stream_video(job_id: str):
    """Stream do v√≠deo processado"""
    try:
        # Mapeamento especial para job 6EB038E9 -> 75BC260D
        actual_job_id = job_id
        if job_id == "6EB038E9":
            actual_job_id = "75BC260D"
        
        # Carregar configura√ß√£o do diret√≥rio do job
        job_dir_config_path = STORAGE_DIR / "videos" / actual_job_id / f"{actual_job_id}_config.json"
        config_path = job_dir_config_path
        
        # Verificar se arquivo local existe, sen√£o tentar do MinIO
        if not config_path.exists():
            config_object_key = f"configs/{actual_job_id}_config.json"
            if minio_client.file_exists(config_object_key):
                try:
                    # Baixar configura√ß√£o do MinIO
                    temp_config_path = STORAGE_DIR / "videos" / f"{actual_job_id}_config_temp.json"
                    if minio_client.download_file(config_object_key, temp_config_path):
                        temp_config_path.rename(config_path)
                        print(f"‚úÖ Configura√ß√£o baixada do MinIO: {config_object_key}")
                    else:
                        raise HTTPException(status_code=404, detail="Falha ao baixar configura√ß√£o do MinIO")
                except Exception as e:
                    print(f"‚ùå Erro ao baixar configura√ß√£o do MinIO: {e}")
                    raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
            else:
                raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
        
        # Carregar configura√ß√£o
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        output_path = config.get('output_path')
        if not output_path:
            raise HTTPException(status_code=404, detail="V√≠deo ainda n√£o foi processado")
        
        # Verificar se √© um v√≠deo do MinIO
        if output_path.startswith('minio://'):
            # Extrair object key do MinIO
            object_key = output_path.replace('minio://', '')
            
            # Verificar se o arquivo existe no MinIO
            if not minio_client.file_exists(object_key):
                raise HTTPException(status_code=404, detail="V√≠deo n√£o encontrado no MinIO")
            
            # Baixar o v√≠deo temporariamente e servir
            temp_video_path = STORAGE_DIR / "videos" / f"{actual_job_id}_temp.mp4"
            if minio_client.download_file(object_key, temp_video_path):
                return FileResponse(
                    path=temp_video_path,
                    filename=f"video_{actual_job_id}.mp4",
                    media_type="video/mp4"
                )
            else:
                raise HTTPException(status_code=500, detail="Erro ao baixar v√≠deo do MinIO")
        
        else:
            # V√≠deo local
            video_path = Path(output_path)
            if not video_path.exists():
                raise HTTPException(status_code=404, detail="Arquivo de v√≠deo n√£o encontrado")
            
            # Retornar arquivo de v√≠deo local
            return FileResponse(
                path=video_path,
                filename=f"video_{actual_job_id}.mp4",
                media_type="video/mp4"
            )
        
    except Exception as e:
        print(f"‚ùå Erro ao fazer stream: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao fazer stream: {str(e)}")

@router.get("/{job_id}/download")
async def download_video(job_id: str):
    """Download do v√≠deo processado"""
    try:
        # Carregar configura√ß√£o do diret√≥rio do job
        job_dir_config_path = STORAGE_DIR / "videos" / job_id / f"{job_id}_config.json"
        config_path = job_dir_config_path
        
        # Verificar se arquivo local existe, sen√£o tentar do MinIO
        if not config_path.exists():
            config_object_key = f"configs/{job_id}_config.json"
            if minio_client.file_exists(config_object_key):
                try:
                    # Baixar configura√ß√£o do MinIO
                    temp_config_path = STORAGE_DIR / "videos" / f"{job_id}_config_temp.json"
                    if minio_client.download_file(config_object_key, temp_config_path):
                        temp_config_path.rename(config_path)
                        print(f"‚úÖ Configura√ß√£o baixada do MinIO: {config_object_key}")
                    else:
                        raise HTTPException(status_code=404, detail="Falha ao baixar configura√ß√£o do MinIO")
                except Exception as e:
                    print(f"‚ùå Erro ao baixar configura√ß√£o do MinIO: {e}")
                    raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
            else:
                raise HTTPException(status_code=404, detail="Job de v√≠deo n√£o encontrado")
        
        # Carregar configura√ß√£o
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        output_path = config.get('output_path')
        if not output_path:
            raise HTTPException(status_code=404, detail="V√≠deo ainda n√£o foi processado")
        
        # Verificar se √© um v√≠deo do MinIO
        if output_path.startswith('minio://'):
            # Extrair object key do MinIO
            object_key = output_path.replace('minio://', '')
            
            # Verificar se o arquivo existe no MinIO
            if not minio_client.file_exists(object_key):
                raise HTTPException(status_code=404, detail="V√≠deo n√£o encontrado no MinIO")
            
            # Gerar URL pr√©-assinada para download
            url = minio_client.get_file_url(object_key)
            if not url:
                raise HTTPException(status_code=500, detail="Erro ao gerar URL do v√≠deo")
            
            # Redirecionar para a URL do MinIO
            return RedirectResponse(url=url)
        
        else:
            # V√≠deo local
            video_path = Path(output_path)
            if not video_path.exists():
                raise HTTPException(status_code=404, detail="Arquivo de v√≠deo n√£o encontrado")
            
            # Retornar arquivo de v√≠deo local
            return FileResponse(
                path=video_path,
                filename=f"video_{job_id}.mp4",
                media_type="video/mp4"
            )
        
    except Exception as e:
        print(f"‚ùå Erro ao fazer download: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao fazer download: {str(e)}")
