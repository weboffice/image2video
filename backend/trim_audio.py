#!/usr/bin/env python3
"""
Script para remover os primeiros 10 segundos de cada arquivo MP3 na pasta assets.
"""

import os
import glob
from moviepy.editor import AudioFileClip

def trim_audio_files(assets_dir, trim_seconds=10):
    """
    Remove os primeiros N segundos de todos os arquivos MP3 em um diret√≥rio.
    
    Args:
        assets_dir (str): Caminho para o diret√≥rio com os arquivos MP3
        trim_seconds (int): N√∫mero de segundos para remover do in√≠cio
    """
    # Encontrar todos os arquivos MP3
    mp3_files = glob.glob(os.path.join(assets_dir, "*.mp3"))
    
    if not mp3_files:
        print("‚ùå Nenhum arquivo MP3 encontrado na pasta assets")
        return
    
    print(f"üéµ Encontrados {len(mp3_files)} arquivos MP3")
    print(f"‚úÇÔ∏è  Removendo os primeiros {trim_seconds} segundos de cada arquivo...\n")
    
    for mp3_file in mp3_files:
        try:
            filename = os.path.basename(mp3_file)
            print(f"üìÅ Processando: {filename}")
            
            # Carregar o arquivo de √°udio
            audio_clip = AudioFileClip(mp3_file)
            
            # Verificar se o arquivo tem pelo menos 10 segundos
            duration_seconds = audio_clip.duration
            if duration_seconds <= trim_seconds:
                print(f"‚ö†Ô∏è  Arquivo {filename} tem apenas {duration_seconds:.1f}s - pulando")
                audio_clip.close()
                continue
            
            # Remover os primeiros 10 segundos
            trimmed_audio = audio_clip.subclip(trim_seconds)
            
            # Criar backup do arquivo original
            backup_file = mp3_file.replace('.mp3', '_original.mp3')
            os.rename(mp3_file, backup_file)
            print(f"üíæ Backup criado: {os.path.basename(backup_file)}")
            
            # Salvar o arquivo cortado
            trimmed_audio.write_audiofile(mp3_file, verbose=False, logger=None)
            
            new_duration = trimmed_audio.duration
            print(f"‚úÖ {filename}: {duration_seconds:.1f}s ‚Üí {new_duration:.1f}s")
            print()
            
            # Fechar os clips para liberar recursos
            audio_clip.close()
            trimmed_audio.close()
            
        except Exception as e:
            print(f"‚ùå Erro ao processar {filename}: {str(e)}")
            print()

def main():
    # Caminho para a pasta assets
    script_dir = os.path.dirname(os.path.abspath(__file__))
    assets_dir = os.path.join(script_dir, "assets")
    
    if not os.path.exists(assets_dir):
        print(f"‚ùå Pasta assets n√£o encontrada: {assets_dir}")
        return
    
    print("üé¨ Script para cortar arquivos MP3")
    print("=" * 50)
    
    # Executar o corte
    trim_audio_files(assets_dir, trim_seconds=10)
    
    print("üéâ Processamento conclu√≠do!")
    print("\nüìù Nota: Os arquivos originais foram salvos com sufixo '_original'")
    print("   Voc√™ pode remov√™-los depois de verificar que tudo est√° correto.")

if __name__ == "__main__":
    main()
