#!/bin/bash

# Script para iniciar o ambiente de produ√ß√£o do Image2Video
# Para processos existentes e inicia backend e frontend em modo produ√ß√£o

echo "üöÄ Iniciando ambiente de PRODU√á√ÉO Image2Video"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rios do projeto (relativos)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BUILD_DIR="$SCRIPT_DIR/../../build"
BACKEND_DIR="$BUILD_DIR/backend"
FRONTEND_DIR="$BUILD_DIR/frontend"

# Portas de produ√ß√£o
BACKEND_PORT=8080
FRONTEND_PORT=3000

# Fun√ß√£o para parar processos existentes
stop_existing_processes() {
    echo -e "${YELLOW}üõë Parando processos existentes...${NC}"
    
    # Parar processos na porta do backend
    BACKEND_PID=$(lsof -ti:$BACKEND_PORT)
    if [ ! -z "$BACKEND_PID" ]; then
        echo -e "${RED}   Parando backend (PID: $BACKEND_PID)${NC}"
        kill -9 $BACKEND_PID 2>/dev/null
        sleep 2
    fi
    
    # Parar processos na porta do frontend
    FRONTEND_PID=$(lsof -ti:$FRONTEND_PORT)
    if [ ! -z "$FRONTEND_PID" ]; then
        echo -e "${RED}   Parando frontend (PID: $FRONTEND_PID)${NC}"
        kill -9 $FRONTEND_PID 2>/dev/null
        sleep 2
    fi
    
    # Parar processos relacionados ao projeto
    pkill -f "main.py" 2>/dev/null
    pkill -f "uvicorn" 2>/dev/null
    pkill -f "http.server.*$FRONTEND_PORT" 2>/dev/null
    pkill -f "serve.*$FRONTEND_PORT" 2>/dev/null
    
    echo -e "${GREEN}‚úÖ Processos existentes parados${NC}"
}

# Fun√ß√£o para verificar se o build existe
check_build() {
    echo -e "${BLUE}üìÅ Verificando build de produ√ß√£o...${NC}"
    
    if [ ! -d "$BUILD_DIR" ]; then
        echo -e "${RED}‚ùå Build de produ√ß√£o n√£o encontrado: $BUILD_DIR${NC}"
        echo -e "${YELLOW}   Execute primeiro: /home/image2video/build-prod.sh${NC}"
        exit 1
    fi
    
    if [ ! -d "$BACKEND_DIR" ]; then
        echo -e "${RED}‚ùå Backend de produ√ß√£o n√£o encontrado: $BACKEND_DIR${NC}"
        echo -e "${YELLOW}   Execute primeiro: /home/image2video/build-prod.sh${NC}"
        exit 1
    fi
    
    if [ ! -d "$FRONTEND_DIR" ]; then
        echo -e "${RED}‚ùå Frontend de produ√ß√£o n√£o encontrado: $FRONTEND_DIR${NC}"
        echo -e "${YELLOW}   Execute primeiro: /home/image2video/build-prod.sh${NC}"
        exit 1
    fi
    
    if [ ! -f "$FRONTEND_DIR/index.html" ]; then
        echo -e "${RED}‚ùå Build do frontend n√£o encontrado${NC}"
        echo -e "${YELLOW}   Execute primeiro: /home/image2video/build-prod.sh${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Build de produ√ß√£o verificado${NC}"
}

# Fun√ß√£o para iniciar o backend
start_backend() {
    echo -e "${BLUE}üêç Iniciando backend de produ√ß√£o...${NC}"
    
    cd "$BACKEND_DIR"
    
    # Verificar se o ambiente virtual existe
    if [ ! -d "venv" ]; then
        echo -e "${RED}‚ùå Ambiente virtual n√£o encontrado${NC}"
        echo -e "${YELLOW}   Execute primeiro: /home/image2video/build-prod.sh${NC}"
        exit 1
    fi
    
    # Verificar se o script de inicializa√ß√£o existe
    if [ ! -f "start-production.sh" ]; then
        echo -e "${RED}‚ùå Script de produ√ß√£o n√£o encontrado${NC}"
        echo -e "${YELLOW}   Execute primeiro: /home/image2video/build-prod.sh${NC}"
        exit 1
    fi
    
    # Iniciar o backend em background
    echo -e "${GREEN}   Iniciando servidor FastAPI na porta $BACKEND_PORT...${NC}"
    nohup ./start-production.sh > "$SCRIPT_DIR/backend-prod.log" 2>&1 &
    BACKEND_PID=$!
    
    # Aguardar um pouco para o backend inicializar
    sleep 5
    
    # Verificar se o backend est√° rodando
    if ps -p $BACKEND_PID > /dev/null; then
        # Verificar se est√° respondendo HTTP
        if curl -s --connect-timeout 5 "http://localhost:$BACKEND_PORT" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Backend iniciado com sucesso (PID: $BACKEND_PID)${NC}"
            echo -e "${GREEN}   URL: http://localhost:$BACKEND_PORT${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Backend iniciado mas n√£o responde HTTP ainda${NC}"
            echo -e "${YELLOW}   Aguarde alguns segundos e verifique o log${NC}"
        fi
    else
        echo -e "${RED}‚ùå Falha ao iniciar o backend${NC}"
        echo -e "${YELLOW}   Verifique o log: tail -f $SCRIPT_DIR/backend-prod.log${NC}"
        exit 1
    fi
}

# Fun√ß√£o para iniciar o frontend
start_frontend() {
    echo -e "${BLUE}‚öõÔ∏è  Iniciando frontend de produ√ß√£o...${NC}"
    
    cd "$BUILD_DIR"
    
    # Verificar se o script de frontend existe
    if [ ! -f "serve-frontend.sh" ]; then
        echo -e "${RED}‚ùå Script do frontend n√£o encontrado${NC}"
        echo -e "${YELLOW}   Execute primeiro: /home/image2video/build-prod.sh${NC}"
        exit 1
    fi
    
    # Iniciar o frontend em background
    echo -e "${GREEN}   Iniciando servidor HTTP na porta $FRONTEND_PORT...${NC}"
    nohup ./serve-frontend.sh $FRONTEND_PORT > "$SCRIPT_DIR/frontend-prod.log" 2>&1 &
    FRONTEND_PID=$!
    
    # Aguardar um pouco para o frontend inicializar
    sleep 3
    
    # Verificar se o frontend est√° rodando
    if ps -p $FRONTEND_PID > /dev/null; then
        # Verificar se est√° respondendo HTTP
        if curl -s --connect-timeout 5 "http://localhost:$FRONTEND_PORT" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Frontend iniciado com sucesso (PID: $FRONTEND_PID)${NC}"
            echo -e "${GREEN}   URL: http://localhost:$FRONTEND_PORT${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Frontend iniciado mas n√£o responde HTTP ainda${NC}"
            echo -e "${YELLOW}   Aguarde alguns segundos e verifique o log${NC}"
        fi
    else
        echo -e "${RED}‚ùå Falha ao iniciar o frontend${NC}"
        echo -e "${YELLOW}   Verifique o log: tail -f $SCRIPT_DIR/frontend-prod.log${NC}"
        exit 1
    fi
}

# Fun√ß√£o para verificar depend√™ncias de produ√ß√£o
check_production_dependencies() {
    echo -e "${BLUE}üîç Verificando depend√™ncias de produ√ß√£o...${NC}"
    
    # Verificar Python
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Python3 n√£o encontrado${NC}"
        exit 1
    fi
    
    # Verificar se tem servidor HTTP dispon√≠vel
    HAS_HTTP_SERVER=false
    
    if command -v python3 &> /dev/null; then
        HAS_HTTP_SERVER=true
        HTTP_SERVER="Python3 HTTP server"
    elif command -v python &> /dev/null; then
        HAS_HTTP_SERVER=true
        HTTP_SERVER="Python HTTP server"
    elif command -v node &> /dev/null; then
        HAS_HTTP_SERVER=true
        HTTP_SERVER="Node.js"
    fi
    
    if [ "$HAS_HTTP_SERVER" = false ]; then
        echo -e "${RED}‚ùå Nenhum servidor HTTP encontrado${NC}"
        echo -e "${YELLOW}   Instale Python ou Node.js${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Depend√™ncias verificadas${NC}"
    echo -e "${GREEN}   Servidor HTTP: $HTTP_SERVER${NC}"
}

# Fun√ß√£o para mostrar status final
show_status() {
    echo ""
    echo "=================================================="
    echo -e "${GREEN}üéâ Ambiente de PRODU√á√ÉO iniciado!${NC}"
    echo "=================================================="
    echo ""
    echo -e "${BLUE}üåê URLs dispon√≠veis:${NC}"
    echo -e "   Frontend: ${GREEN}http://localhost:$FRONTEND_PORT${NC}"
    echo -e "   Backend API: ${GREEN}http://localhost:$BACKEND_PORT${NC}"
    echo -e "   API Docs: ${GREEN}http://localhost:$BACKEND_PORT/docs${NC}"
    echo ""
    echo -e "${BLUE}üìù Logs de produ√ß√£o:${NC}"
    echo -e "   Backend: ${YELLOW}tail -f $SCRIPT_DIR/backend-prod.log${NC}"
    echo -e "   Frontend: ${YELLOW}tail -f $SCRIPT_DIR/frontend-prod.log${NC}"
    echo ""
    echo -e "${BLUE}üõë Para parar os servi√ßos:${NC}"
    echo -e "   ${YELLOW}$SCRIPT_DIR/stop-prod.sh${NC}"
    echo ""
    echo -e "${BLUE}üìä Para verificar status:${NC}"
    echo -e "   ${YELLOW}$SCRIPT_DIR/status-prod.sh${NC}"
    echo ""
    echo -e "${BLUE}üîÑ Para fazer novo build:${NC}"
    echo -e "   ${YELLOW}$SCRIPT_DIR/build-prod.sh${NC}"
    echo ""
    echo -e "${BLUE}‚ö†Ô∏è  Lembrete de Produ√ß√£o:${NC}"
    echo -e "   ‚Ä¢ Configure SSL/HTTPS para produ√ß√£o real"
    echo -e "   ‚Ä¢ Configure vari√°veis de ambiente adequadas"
    echo -e "   ‚Ä¢ Use servidor web profissional (Nginx/Apache)"
    echo -e "   ‚Ä¢ Configure backup e monitoramento"
    echo ""
}

# Executar fun√ß√µes principais
main() {
    stop_existing_processes
    check_build
    check_production_dependencies
    start_backend
    start_frontend
    show_status
}

# Verificar se o script est√° sendo executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
